# Usuário do processo NGINX
user  nginx;

# Define a quantidade de processos de trabalho baseados nos núcleos da máquina
worker_processes  auto;

# Caminho dos logs e PID
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    # Define o número máximo de conexões simultâneas por worker
    worker_connections 1024;
}

http {
    # Inclui tipos MIME padrão
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Caminho do log de acesso das requisições HTTP
    access_log  /var/log/nginx/access.log;

    # Ativa transferência eficiente de arquivos
    sendfile        on;
    # Tempo de espera para conexões keep-alive
    keepalive_timeout  65;

    # Define o tamanho máximo permitido para uploads de arquivos
    client_max_body_size 20M;

    # (Opcional) Ativa compressão gzip para respostas estáticas
    #gzip on;
    #gzip_types text/plain application/javascript application/x-javascript text/javascript text/xml text/css;

    server {
        # Porta que o NGINX irá escutar (HTTP)
        listen       80;
        # Nome do servidor (pode ser domínio ou IP); '_' aceita qualquer valor
        server_name  _;

        # ------------------------
        # Servindo arquivos estáticos do Angular SSR (ex: /browser/)
        # O build SSR do Angular normalmente gera /browser para arquivos estáticos (JS, CSS, imagens)
        location /browser/ {
            # Define o diretório real onde estão os arquivos gerados
            alias /usr/share/nginx/html/browser/;
            # Verifica se o arquivo requisitado existe, senão retorna erro 404
            try_files $uri $uri/ =404;
            # Desativa logs para esses arquivos estáticos (opcional)
            access_log off;
            # Define tempo de expiração dos arquivos estáticos no cache do navegador
            expires 1d;
            # Adiciona header para controle de cache em arquivos estáticos
            add_header Cache-Control \"public, max-age=86400\";
        }

        # Servindo arquivos pontuais como favicon e robots.txt sem gerar log
        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        # ------------------------
        # Segurança: Bloqueia acesso a arquivos ocultos/sensíveis (.env, .git, etc)
        location ~ /\.(git|env|ht|DS_Store) {
            deny all;
        }

        # ------------------------
        # Proxy reverso para SSR Node.js
        # Todas as rotas não encontradas como estático serão redirecionadas para o Node.js (SSR)
        location / {
            # Passa requisições para o servidor Node.js, porta 4000 (ajuste conforme sua aplicação)
            proxy_pass         http://localhost:4000;
            # Suporte a websockets
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection 'upgrade';
            # Passa o hostname original
            proxy_set_header   Host $host;
            # Não faz cache caso seja upgrade (websocket)
            proxy_cache_bypass $http_upgrade;
            # Passa IP real do cliente para o backend
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            # Aumenta tempo limite da resposta do SSR (caso a renderização seja lenta)
            proxy_read_timeout 120;
        }

        # ------------------------
        # Exemplo: bloqueio extra de acesso administrativo via IP (comentado)
        # location /admin {
        #     allow 192.168.0.0/16;
        #     deny all;
        # }
    }
}
